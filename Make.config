# -*- makefile -*-

#############################################################################
# Compiler configuration options file. Do NOT modify this unless you know   #
# what you are doing (or you have been told exactly what to do).            #
#############################################################################

SHELL = /bin/sh

# CRITICAL!! Do NOT remove this line. This is what tells make where to
# search for source code files that are needed for objects.
VPATH = $(SRCDIR)

# First, specify the compiler and linker to use. For this project, we
# are using GCC as both the compiler and linker, but this is not necessary.
CC = gcc
CCLD = $(CC)
LINK = $(CCLD)

ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
  $(warning *** Compiler ($(CC)) not found. Please contact instructor ***)
endif

# Compiler flags and warnings specification here. Traditionally, CFLAGS
# specifies C-specific flags, while CPPFLAGS specifies things that are
# used for C++ code.

WARNINGS = -Wall -Werror
CFLAGS = -g -O0
CPPFLAGS = 
LDFLAGS =

# Set up the compilation and link command lines.  The compilation
# phase produces one or more object files, while the linking phase
# generates the actual executable program.
COMPILE = $(CC) $(CPPFLAGS) $(CFLAGS) $(WARNINGS)
LINK = $(CCLD) $(LDFLAGS) -o $@

# Indicate the standard extensions for object files and executables.
# In the non-Windows world, object files are typically .o, while
# executables do not have an extension.  In Windows, the executable
# extension would be .exe.
OBJEXT = o
EXEEXT = 

# These two lines set up the compilation phase for .c and .cpp files.
# The % is a wild-card that matches anything. So these two lines
# automatically generate directives for all object files. For
# instance, foo.o will be built from the dependency file foo.c. It
# will be compiled with -c foo.c (the $< means foo.c) and -o foo.o
# (the $@ means foo.o).
%.o: %.c
	$(COMPILE) -c $< -o $@
